extend type Query {
  "Load a environment from ID."
  environment(id: EnvironmentID): Environment!

  "Load a environment command from ID."
  environmentCommand(id: EnvironmentCommandID): EnvironmentCommand!
}

"A unique environment identifier."
scalar EnvironmentID

"A unique environment command identifier."
scalar EnvironmentCommandID

"A collection of Dagger resources that can be queried and invoked."
type Environment {
  "A unique identifier for this environment."
  id: EnvironmentID!

  "Initialize this environment from the given directory and config path"
  load(source: DirectoryID!, configPath: String!): Environment!

  "Name of the environment"
  name: String!

  "Commands provided by this environment"
  commands: [EnvironmentCommand!]
}

"A command defined in a environment that can be invoked from the CLI."
type EnvironmentCommand {
  "A unique identifier for this command."
  id: EnvironmentCommandID!

  "The name of the command."
  name: String!

  "Flags accepted by this command."
  flags: [EnvironmentCommandFlag!]

  "The name of the type returned by this command."
  resultType: String

  "Documentation for what this command does."
  description: String

  "Subcommands, if any, that this command provides."
  subcommands: [EnvironmentCommand!]
}

"A flag accepted by a environment command."
type EnvironmentCommandFlag {
  "The name of the flag."
  name: String!

  "Documentation for what this flag sets."
  description: String
}
