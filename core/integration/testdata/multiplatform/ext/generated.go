// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package main

import (
	"context"
	"encoding/json"

	"go.dagger.io/dagger/sdk/go/dagger"
)

func (r *compileOutput) fs(ctx context.Context, obj *CompileOutput) (*dagger.Filesystem, error) {

	return obj.Fs, nil

}

func (r *compileOutput) stdout(ctx context.Context, obj *CompileOutput) (string, error) {

	return obj.Stdout, nil

}

func (r *query) multiplatform(ctx context.Context) (*Multiplatform, error) {

	return new(Multiplatform), nil

}

type compileOutput struct{}
type multiplatform struct{}
type query struct{}

func main() {
	dagger.Serve(context.Background(), map[string]func(context.Context, dagger.ArgsInput) (interface{}, error){
		"CompileOutput.fs": func(ctx context.Context, fc dagger.ArgsInput) (interface{}, error) {
			var bytes []byte
			_ = bytes
			var err error
			_ = err

			obj := new(CompileOutput)
			bytes, err = json.Marshal(fc.ParentResult)
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, obj); err != nil {
				return nil, err
			}

			return (&compileOutput{}).fs(ctx,

				obj,
			)
		},
		"CompileOutput.stdout": func(ctx context.Context, fc dagger.ArgsInput) (interface{}, error) {
			var bytes []byte
			_ = bytes
			var err error
			_ = err

			obj := new(CompileOutput)
			bytes, err = json.Marshal(fc.ParentResult)
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, obj); err != nil {
				return nil, err
			}

			return (&compileOutput{}).stdout(ctx,

				obj,
			)
		},
		"Multiplatform.arch": func(ctx context.Context, fc dagger.ArgsInput) (interface{}, error) {
			var bytes []byte
			_ = bytes
			var err error
			_ = err

			var in string

			bytes, err = json.Marshal(fc.Args["in"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &in); err != nil {
				return nil, err
			}

			return (&multiplatform{}).arch(ctx,

				&in,
			)
		},
		"Multiplatform.emulateCompile": func(ctx context.Context, fc dagger.ArgsInput) (interface{}, error) {
			var bytes []byte
			_ = bytes
			var err error
			_ = err

			var src dagger.FSID

			bytes, err = json.Marshal(fc.Args["src"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &src); err != nil {
				return nil, err
			}

			var subpath string

			bytes, err = json.Marshal(fc.Args["subpath"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &subpath); err != nil {
				return nil, err
			}

			return (&multiplatform{}).emulateCompile(ctx,

				src,

				&subpath,
			)
		},
		"Multiplatform.crossCompile": func(ctx context.Context, fc dagger.ArgsInput) (interface{}, error) {
			var bytes []byte
			_ = bytes
			var err error
			_ = err

			var src dagger.FSID

			bytes, err = json.Marshal(fc.Args["src"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &src); err != nil {
				return nil, err
			}

			var subpath string

			bytes, err = json.Marshal(fc.Args["subpath"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &subpath); err != nil {
				return nil, err
			}

			return (&multiplatform{}).crossCompile(ctx,

				src,

				&subpath,
			)
		},
		"Query.multiplatform": func(ctx context.Context, fc dagger.ArgsInput) (interface{}, error) {
			var bytes []byte
			_ = bytes
			var err error
			_ = err

			return (&query{}).multiplatform(ctx)
		},
	})
}
