// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package db

import (
	"context"
)

const insertCall = `-- name: InsertCall :exec
INSERT INTO calls (
    dagql_cache_key,
    buildkit_cache_key,
    ttl_unix_time
) VALUES (
    ?, ?, ?
)
`

type InsertCallParams struct {
	DagqlCacheKey    string
	BuildkitCacheKey string
	TtlUnixTime      int64
}

func (q *Queries) InsertCall(ctx context.Context, arg InsertCallParams) error {
	_, err := q.db.ExecContext(ctx, insertCall, arg.DagqlCacheKey, arg.BuildkitCacheKey, arg.TtlUnixTime)
	return err
}

const removeCall = `-- name: RemoveCall :exec
DELETE FROM calls WHERE dagql_cache_key = ?
`

func (q *Queries) RemoveCall(ctx context.Context, dagqlCacheKey string) error {
	_, err := q.db.ExecContext(ctx, removeCall, dagqlCacheKey)
	return err
}

const selectCall = `-- name: SelectCall :one
SELECT dagql_cache_key, buildkit_cache_key, ttl_unix_time FROM calls WHERE dagql_cache_key = ?
`

func (q *Queries) SelectCall(ctx context.Context, dagqlCacheKey string) (Call, error) {
	row := q.db.QueryRowContext(ctx, selectCall, dagqlCacheKey)
	var i Call
	err := row.Scan(&i.DagqlCacheKey, &i.BuildkitCacheKey, &i.TtlUnixTime)
	return i, err
}
