name: "Test Integration"

on:
  push:
    branches: [main]
    paths:
      - "**.sh"
      - "**.bash"
      - "**.go"
      - "**.cue"
      - "**.bats"
      - "Makefile"
      - "go.mod"
      - "go.sum"
      - ".github/workflows/test-integration.yml"
      - "!docs/**"

  pull_request:
    branches: [main]
    paths:
      - "**.sh"
      - "**.bash"
      - "**.go"
      - "**.cue"
      - "**.bats"
      - "Makefile"
      - "go.mod"
      - "go.sum"
      - ".github/workflows/test-integration.yml"
      - "!docs/**"

env:
  DAGGER_CACHE_BASE: dagger-ci-integration

jobs:
  test-integration:
    name: "Integration Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: "Check out"
        uses: actions/checkout@v2

      - name: "Setup Go"
        uses: actions/setup-go@v1
        with:
          go-version: 1.18

      - name: "Install CUE"
        run: |
          export CUE_VERSION="$(grep cue ./go.mod | cut -d' ' -f2 | head -1 | sed -E 's/\.[[:digit:]]\.[[:alnum:]]+-[[:alnum:]]+$//')"
          export CUE_TARBALL="cue_${CUE_VERSION}_linux_amd64.tar.gz"
          echo "Installing cue version $CUE_VERSION"
          curl -L https://github.com/cue-lang/cue/releases/download/${CUE_VERSION}/${CUE_TARBALL} | sudo tar zxf - -C /usr/local/bin

      - name: "Install SOPS"
        run: |
          # SOPS
          sudo curl -L -o /usr/local/bin/sops https://github.com/mozilla/sops/releases/download/v3.7.1/sops-v3.7.1.linux
          sudo chmod +x /usr/local/bin/sops

      - name: "Expose GitHub Runtime"
        uses: crazy-max/ghaction-github-runtime@v1

      - name: Sets env vars on push to main
        run: |
          echo "DAGGER_CACHE_TO=type=gha,mode=max,scope=${{env.DAGGER_CACHE_BASE}}-main" >> $GITHUB_ENV
          echo "DAGGER_CACHE_FROM=type=gha,scope=${{env.DAGGER_CACHE_BASE}}-main" >> $GITHUB_ENV
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}

      - name: Sets env vars on pull request
        run: |
          echo "DAGGER_CACHE_TO=type=gha,mode=max,scope=${{env.DAGGER_CACHE_BASE}}-${{github.event.number}}" >> $GITHUB_ENV
          echo "DAGGER_CACHE_FROM=type=gha,scope=${{env.DAGGER_CACHE_BASE}}-main type=gha,scope=${{env.DAGGER_CACHE_BASE}}-${{github.event.number}}" >> $GITHUB_ENV
        if: ${{ github.event_name == 'pull_request' }}

      - name: Start Buildkitd and Jaeger
        run: |
          export DAGGER_BUILDKITD_VERSION="$(go list -m github.com/moby/buildkit | cut -d' ' -f2)"
          export DAGGER_BUILDKITD_JAEGER_VOLUME_TYPE="bind"
          export DAGGER_BUILDKITD_JAEGER_VOLUME_SOURCE="${{ runner.temp }}/jaeger"
          mkdir ${DAGGER_BUILDKITD_JAEGER_VOLUME_SOURCE}
          docker compose -f tracing.compose.yaml up -d
          echo BUILDKIT_HOST="docker-container://dagger-buildkitd-jaeger" >> $GITHUB_ENV
          echo OTEL_EXPORTER_JAEGER_ENDPOINT="http://localhost:14268/api/traces" >> $GITHUB_ENV
          echo JAEGER_TRACE=localhost:6831 >> $GITHUB_ENV

      - name: Test
        run: |
          export DAGGER_LOG_FORMAT=plain
          env
          make core-integration

      - name: Print Buildkitd Logs
        if: always()
        run: |
          docker logs dagger-buildkitd-jaeger

      - name: Stop Buildkitd and Jaeger
        if: always()
        run: |
          docker compose -f tracing.compose.yaml down
          sudo chown -R ${USER} ${{ runner.temp }}/jaeger

      - name: Upload Jaeger Data
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: jaeger_data
          path: ${{ runner.temp }}/jaeger

      - name: Print Jaeger View Command
        if: always()
        run:
          echo "To view Jaeger traces, run:"
          echo dagger do -p ci/jaeger/view.cue jaegerView \
            --with \'actions: jaegerView: runID: \"${GITHUB_RUN_ID}\"\' \
            --with \'actions: jaegerView: repository: \"${GITHUB_REPOSITORY}\"\' \
            --with \'actions: jaegerView: artifactName: jaeger_data\'
